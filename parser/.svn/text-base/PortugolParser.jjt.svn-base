/*



*/


options {

	//javacc options
	//DEBUG_PARSER = true;
	//DEBUG_TOKEN_MANAGER = true;
	//JAVA_UNICODE_ESCAPE = true;
	//USER_TOKEN_MANAGER = true;
	//BUILD_TOKEN_MANAGER = false;
	//FORCE_LA_CHECK = true;
	//CACHE_TOKENS = true;
	//IGNORE_CASE = true; //regular expression production is case insensitive
	//LOOKAHEAD = 4;
  
	STATIC=false;
  
	//jjtree options
	MULTI=true;
	//NODE_DEFAULT_VOID=true;
	//NODE_PREFIX="";
	VISITOR=true;
	TRACK_TOKENS=true; 
	//NODE_EXTENDS="MyNode"; //this option has been deprecated 
	//NODE_USES_PARSER = true;
	VISITOR_EXCEPTION = "Exception";
	//NODE_PACKAGE = "Portugol.Core";
}

PARSER_BEGIN(PortugolParser)
	
	//package Portugol.Core;
	
	//import java.io.BufferedReader;
	//import java.io.IOException;
	//import java.io.InputStreamReader;

    class PortugolParser 
	{
	//JAVACODE
		boolean IsStatement() //#void
		{	
			int i=1;
			Token tok = getToken(i);
			if( tok.kind == WHILE ) {
				do{
					tok = getToken(++i);
					if(tok.kind == DO ) return true;     
				}while(tok.kind != EOL && tok.kind != EOF);    
			}
			else if(tok.kind == DO) return true;	
			else if(tok.kind == FOR) return true;
			else if(tok.kind == SWITCH) return true;
			else if(tok.kind == IF) return true;
			else if(tok.kind == IDENTIFIER) return true;
			else if(tok.kind == CONSTANT) return true;
			else if(tok.kind == REFERENCE) return true;
			else if(tok.kind == VARIABLE) return true;
			else if(tok.kind == INT) return true;
			else if(tok.kind == REAL) return true;
			else if(tok.kind == STRING) return true;
			else if(tok.kind == CHAR) return true;
			else if(tok.kind == BOOL) return true;
			else if(tok.kind == RETURN) return true;	
			else if(tok.kind == EOL) return true; 
			return false;
		}

		//JAVACODE
		boolean IsFunctionDeclaration() //#void
		{	
			int i=0;
			Token tok = getToken(i);	
			do{
					tok = getToken(++i);
					if(tok.kind == LPARENT ) return true;     
			}while(tok.kind != EOL && tok.kind != EOF);    

			return false;
		}
	}

PARSER_END(PortugolParser)

SKIP :
{
    < " " >
|   < "\r" >
|   < "\t" >
| 	< SINGLE_LINE_COMMENT: "//" (~["\n"])* "\n" >
| 	< MULTI_LINE_COMMENT: "/*" (~["*"])* "*" (~["/"] (~["*"])* "*")* "/">
}



TOKEN :
{

//type-specifiers   
	< INT: "inteiro" >
|	< REAL: "real" >
|	< STRING: "texto" >
|	< CHAR: "caracter" >
|	< BOOL: "logico" >

//type-qualifier   
|	< CONSTANT: "const" >
|	< VARIABLE: "var" >
|	< REFERENCE: "ref" >

|	< VOID: "vazio" >

//keywords

|	< IMPORT: "importa" >
|	< END: "fim" >

|	< RETURN: "retorna" >

|	< STRUCT: "estrutura"	>

|	< IF: "se" >
|	< THEN: "entao" >
|	< ELSE: "senao" >
|	< ENDIF: "fimse" >

|	< WHILE: "enquanto" >
|	< DO: "faz" >
|	< ENDWHILE: "fimenquanto" >

|	< FOR: "para" >
|	< OF: "de" >
|	< TO: "ate" >
|	< STEP: "passo" >
|	< NEXT: "seguinte" >

|	< SWITCH: "escolhe" >
|	< CASE: "caso" >
|	< _DEFAULT: "defeito" >
|	< ENDSWITCH: "fimescolhe" >

//operators:
|	< AND: "e" >
|	< OR: "ou" >
//|	< NAND: "ne" >
//|	< NOR: "nou" >
|	< XOR: "xou" >
|	< NOT: "nao" >

|	< OP_ASSIGN: "=" >  

|	< OP_GE: ">=" >
|	< OP_LE: "<=" >
|	< OP_G: ">" >
|	< OP_L: "<" >
|	< OP_E: "==" >
|	< OP_NEQ: "!=" >
    
|	< OP_PLUS: "+" >
|	< OP_MINUS: "-" >
|	< OP_MUL: "*" >
|	< OP_DIV: "/" >
|	< OP_MOD: "%" >

//separators
|	< LPARENT: "(" >
|	< RPARENT: ")" >

| 	< COMMA: "," >
| 	< DOT: "." >
    
| 	< LBRACKET: "[" >
| 	< RBRACKET: "]" >
 
|	< LKEYWAY: "{" >
|	< RKEYWAY: "}" >

| 	< EOL: "\n" >


//literals
|	< TRUE: "verdadeiro" >
|	< FALSE: "falso" >
|	< NULL: "nulo" >

|	< IDENTIFIER: (["_", "A"-"Z", "a"-"z"]) (["_", "A"-"Z", "a"-"z", "0"-"9"])* >

| 	< CHAR_LITERAL: "\'" (~["\'"]) "\'">
| 	< INT_LITERAL:  ( ["1"-"9"] (["0"-"9"])* | "0") >
| 	< REAL_LITERAL: (["0"-"9"])+ ( "." (["0"-"9"])+ )? | "." (["0"-"9"])+ >
| 	< STRING_LITERAL: "\"" (~["\""])* "\"" >

}

///



//sintax rules

void Start() : {}
{
	( ImportDeclaration() | <EOL> )*
	
	(  GlobalDeclarationList() | <EOL>	)*	
		
	<EOF>
}

//the node ImportDeclaration have the follow attributes:
//string unit_name
void ImportDeclaration(): 
{
	Token t;
}
{
	<IMPORT> t = <IDENTIFIER> <EOL> 
	{	jjtThis.setUnitName(t); }
}

void GlobalDeclarationList() #void : {}
{	
	LOOKAHEAD( { IsFunctionDeclaration() } )
	FunctionDeclaration()
	|
	VariableDeclarationList()
	|				
	StructDeclaration()	
}
//the node VariableDeclarationList have the follow attributes:
//int type_quali
//int type_spec
//string type_spec_custom

void VariableDeclarationList() : 
{
	Token t;
}
{	
	[ 
	t = TypeQualifier()	
	{ jjtThis.setTypeQualifier( t ); } 	
	] 
	
	t = TypeSpecifier() 	
	{ 
	  jjtThis.setTypeSpecifier(t);
	}
	VariableDeclaration() ( <COMMA> VariableDeclaration()  )*	
}

Token TypeQualifier() #void : 
{
	Token t;
}
{
	( t = <CONSTANT>
	| t = <VARIABLE>
	| t = <REFERENCE> )
	{ return t; }
	
}

Token TypeSpecifier() #void : 
{
	Token t;
}
{
	( t = <INT>
	| t = <REAL>
	| t = <STRING>
	| t = <CHAR>
	| t = <BOOL>
	| t = <IDENTIFIER> )
	{ return t; }
}

//the node VariableDeclaration have the follow attributes:
//string var_name
//boolean is_array
//array sizes and dimentions..

void VariableDeclaration() : 
{
	Token t;
}
{
	t = VariableDeclarationId()	[ <OP_ASSIGN> VariableInitializer() ]
	{ jjtThis.setVarName( t ); }
}

Token VariableDeclarationId() #void : 
{
	Token t;
}
{
	t = <IDENTIFIER> [ ArrayDims() ]
	{ return t; }
}

//-- array support..
void ArrayDims() : {}
{
	( <LBRACKET> Expression() <RBRACKET> )+
}

void VariableInitializer() #void : {}
{
	ArrayInitializer()
	|
	Expression()
}

//allowed eof on array inicializator?
void ArrayInitializer(): {}
{		
  <LKEYWAY>  VariableInitializer() ( <COMMA> VariableInitializer() )*  <RKEYWAY>
}


//---------------------------------------

//the node FunctionDeclaration have the follow attributes:
//int return_type
//string func_name
//string return_type_custom
void FunctionDeclaration() : 
{
	Token t;
}
{	
	[ 
	LOOKAHEAD(ReturnType() <IDENTIFIER> <LPARENT>) 	
	t = ReturnType()	
	{ 
	  jjtThis.setReturnType( t );
	}	
	] 
		
	t = <IDENTIFIER> FormalParametersList() <EOL>
	{ jjtThis.setFuncName( t ); }
	
	Statements()
	
	<END> [ <IDENTIFIER> ] (<EOL>|<EOF>)
}

Token ReturnType() #void : 
{
	Token t;
}
{
	( t = <VOID> //{ jjtThis.return_type = VOID; } 
	| t = <INT>  //{ jjtThis.return_type = INT; }
	| t = <REAL>  //{ jjtThis.return_type = REAL; }
	| t = <STRING> //{ jjtThis.return_type = STRING; }
	| t = <CHAR> //{ jjtThis.return_type = CHAR; }
	| t = <BOOL> //{ jjtThis.return_type = BOOL; }
	| t = <IDENTIFIER> )//{  jjtThis.return_type = IDENTIFIER;  jjtThis.return_type_custom  = t.image; } )
	{ return t; }
}

//nr_parameters
void FormalParametersList() : {}
{		
	<LPARENT> [ FormalParameter() ( <COMMA> FormalParameter() )* ] <RPARENT>
}

//
//string var_name
//int type_spec
//string type_spec_custom

void FormalParameter() : 
{ 
	Token t;
} 
{
	t = TypeSpecifier() { jjtThis.setParamType( t ); }	
	t = VariableDeclarationId()	{ jjtThis.setParamName( t ); }			
}

//---------------------------------------

//string struct_name;
// todo fields..


//nchilds = nr fields..
void StructDeclaration():
{
	Token t;
}
{
	<STRUCT> t = <IDENTIFIER> <EOL>
	( VariableDeclarationList() <EOL> )+
	
	<END> [<IDENTIFIER>] (<EOL>|<EOF>)
	{	jjtThis.setStructName( t ); }
}

//---------------------------------------

void Statements() : {}
{

	(
		LOOKAHEAD( { IsStatement() } ) //solve the ambiguity between <while> <do> / <do> <while>
		Statement()
	)*
}

void Statement() #void : {}
{			
		LOOKAHEAD(2)
		CallFunction() //#Statement
		| 

		(
		LOOKAHEAD( <IDENTIFIER> ( <LBRACKET> Expression() <RBRACKET> | <DOT> <IDENTIFIER> )*  <OP_ASSIGN> Expression() )
			AssignmentStatement() //#Statement
		| 	
			VariableDeclarationList() //#Statement
		) 
		
		| WhileDoStatement() //#Statement
		| DoWhileStatement() //#Statement	 		
		| IfStatement() //#Statement
		| SwitchStatement()	//#Statement
		| ForStatement() //#Statement
		| ReturnStatement() //#Statement
		| <EOL>		
}

void ReturnStatement() : {}
{
	<RETURN> Expression()
}

void IfStatement() : {}
{
	<IF> Expression() <THEN> Statements()	
	//( LOOKAHEAD(2) <ELSE> <IF> Expression() <THEN> Statements() )*
	( LOOKAHEAD(1) <ELSE> Statements() )?
	<ENDIF>
	
}

void SwitchStatement() : {}
{
	<SWITCH> Expression() <EOL>
	(
		SwitchLabel()
		Statements()
	)*
	<ENDSWITCH>
}

void SwitchLabel() : {}
{
  <CASE> Expression() <EOL>
|
  <_DEFAULT> <EOL> { jjtThis.is_default = true; }
}

void WhileDoStatement() : {}
{
	<WHILE> Expression() <DO> <EOL>
		Statements()
	<ENDWHILE>
}

void DoWhileStatement() : {}
{
	<DO> <EOL>
		Statements()		
	<WHILE> Expression()
}
	
void ForStatement() : {}
{
	<FOR> VariableName() <OF> Expression() <TO> Expression() [ <STEP> Expression() ] <EOL>
		Statements()
	<NEXT>
}

void CallFunction() : 
{
	Token t;
}
{
	t = <IDENTIFIER> <LPARENT> [ Expression() ( <COMMA> Expression() )* ] <RPARENT>
	{ jjtThis.setFuncName( t ); }
}

//---------------------------------------

//Expression syntax follows. 

void Expression() #void :
{}
{
	ConditionalOrExpression()
}

void AssignmentStatement() :
{}
{
  //PrimaryExpression() <OP_ASSIGN> Expression()
  //<IDENTIFIER> ( <LBRACKET> Expression() <RBRACKET> | <DOT> <IDENTIFIER> )* 
  VariableName()  <OP_ASSIGN> Expression()
}

void ConditionalOrExpression() #void :
{}
{
  ConditionalAndExpression() ( <OR> ConditionalAndExpression() #OrNode(2) )*
}

void ConditionalAndExpression() #void :
{}
{
  ExclusiveOrExpression() ( <AND> ExclusiveOrExpression() #AndNode(2) )*
}

void ExclusiveOrExpression() #void :
{}
{
  EqualityExpression() ( <XOR> EqualityExpression() #XorNode(2) )*
}

void EqualityExpression() #void :
{}
{
  RelationalExpression() ( <OP_E> RelationalExpression() #EqNode(2) | <OP_NEQ>  RelationalExpression() #NEqNode(2) )*
}

void RelationalExpression() #void :
{}
{
  AdditiveExpression() 
  ( 
    <OP_G> AdditiveExpression() #GNode(2)
  | <OP_L> AdditiveExpression() #LNode(2)
  | <OP_GE> AdditiveExpression() #GENode(2)
  | <OP_LE> AdditiveExpression() #LENode(2)
  )*
}

void AdditiveExpression() #void :
{}
{
  MultiplicativeExpression() 
  ( 
    <OP_PLUS> MultiplicativeExpression() #AddNode(2)
  | <OP_MINUS> MultiplicativeExpression() #SubNode(2)
  )*
}

void MultiplicativeExpression() #void :
{}
{
  UnaryExpression() 
  ( 
     <OP_MUL> UnaryExpression() #MulNode(2)
   | <OP_DIV> UnaryExpression() #DivNode(2)
   | <OP_MOD> UnaryExpression() #ModNode(2)
   )*
}

void UnaryExpression() #void :
{}
{
    <OP_PLUS> UnaryExpression()
  | <OP_MINUS> UnaryExpression() #NegNode    
  | <NOT> UnaryExpression()  #NotNode
  | PrimaryExpression()
}

void PrimaryExpression() #void :
{}
{
  LOOKAHEAD(2)
  CallFunction()
  |
  VariableName()
  |
  <LPARENT> Expression() <RPARENT>
  |
  Literal()
}

void VariableName(): 
{
	Token t;
}
{	
	//[ ] array index
    //.   member access
	
	t = <IDENTIFIER> { jjtThis.setVarName( t ); }
	
	( VariableNameSuffix() )*
}

//-----
//array and struct operators support
void VariableNameSuffix() #void:
{}
{	
	IndexSelector() | FieldSelector()	
}

void IndexSelector() : {}
{
	<LBRACKET> Expression() <RBRACKET>
}

void FieldSelector() : {}
{
	<DOT> <IDENTIFIER>
}
//----

void Literal() #void :
{
	Token t;
}
{
	   t = <CHAR_LITERAL> { jjtThis.value = t.image; } #CharNode
	 | t = <INT_LITERAL>  { jjtThis.value = Integer.parseInt(t.image); } #IntNode
	 | t = <REAL_LITERAL> { jjtThis.value = Double.parseDouble(t.image); } #RealNode
	 | t = <STRING_LITERAL>	{ jjtThis.value = t.image; } #StringNode
	 | <TRUE> #TrueNode
	 | <FALSE> #FalseNode
	 | <NULL> #NullNode
}



