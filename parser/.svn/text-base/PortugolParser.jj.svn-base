/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. .\PortugolParser.jj */
/*@egen*//*



*/


options {

	//javacc options
	//DEBUG_PARSER = true;
	//DEBUG_TOKEN_MANAGER = true;
	//JAVA_UNICODE_ESCAPE = true;
	//USER_TOKEN_MANAGER = true;
	//BUILD_TOKEN_MANAGER = false;
	//FORCE_LA_CHECK = true;
	//CACHE_TOKENS = true;
	//IGNORE_CASE = true; //regular expression production is case insensitive
	//LOOKAHEAD = 4;
  
	STATIC=false;
  
	                
	           
	                         
	                 
	             
	                   
	                                                           
	                          
	                                
	//NODE_PACKAGE = "Portugol.Core";
}

PARSER_BEGIN(PortugolParser)
	
	//package Portugol.Core;
	
	//import java.io.BufferedReader;
	//import java.io.IOException;
	//import java.io.InputStreamReader;

    class PortugolParser/*@bgen(jjtree)*/implements PortugolParserTreeConstants/*@egen*/ 
	{/*@bgen(jjtree)*/
  protected JJTPortugolParserState jjtree = new JJTPortugolParserState();

/*@egen*/
	//JAVACODE
		boolean IsStatement() //#void
		{	
			int i=1;
			Token tok = getToken(i);
			if( tok.kind == WHILE ) {
				do{
					tok = getToken(++i);
					if(tok.kind == DO ) return true;     
				}while(tok.kind != EOL && tok.kind != EOF);    
			}
			else if(tok.kind == DO) return true;	
			else if(tok.kind == FOR) return true;
			else if(tok.kind == SWITCH) return true;
			else if(tok.kind == IF) return true;
			else if(tok.kind == IDENTIFIER) return true;
			else if(tok.kind == CONSTANT) return true;
			else if(tok.kind == REFERENCE) return true;
			else if(tok.kind == VARIABLE) return true;
			else if(tok.kind == INT) return true;
			else if(tok.kind == REAL) return true;
			else if(tok.kind == STRING) return true;
			else if(tok.kind == CHAR) return true;
			else if(tok.kind == BOOL) return true;
			else if(tok.kind == RETURN) return true;	
			else if(tok.kind == EOL) return true; 
			return false;
		}

		//JAVACODE
		boolean IsFunctionDeclaration() //#void
		{	
			int i=0;
			Token tok = getToken(i);	
			do{
					tok = getToken(++i);
					if(tok.kind == LPARENT ) return true;     
			}while(tok.kind != EOL && tok.kind != EOF);    

			return false;
		}
	}

PARSER_END(PortugolParser)

SKIP :
{
    < " " >
|   < "\r" >
|   < "\t" >
| 	< SINGLE_LINE_COMMENT: "//" (~["\n"])* "\n" >
| 	< MULTI_LINE_COMMENT: "/*" (~["*"])* "*" (~["/"] (~["*"])* "*")* "/">
}



TOKEN :
{

//type-specifiers   
	< INT: "inteiro" >
|	< REAL: "real" >
|	< STRING: "texto" >
|	< CHAR: "caracter" >
|	< BOOL: "logico" >

//type-qualifier   
|	< CONSTANT: "const" >
|	< VARIABLE: "var" >
|	< REFERENCE: "ref" >

|	< VOID: "vazio" >

//keywords

|	< IMPORT: "importa" >
|	< END: "fim" >

|	< RETURN: "retorna" >

|	< STRUCT: "estrutura"	>

|	< IF: "se" >
|	< THEN: "entao" >
|	< ELSE: "senao" >
|	< ENDIF: "fimse" >

|	< WHILE: "enquanto" >
|	< DO: "faz" >
|	< ENDWHILE: "fimenquanto" >

|	< FOR: "para" >
|	< OF: "de" >
|	< TO: "ate" >
|	< STEP: "passo" >
|	< NEXT: "seguinte" >

|	< SWITCH: "escolhe" >
|	< CASE: "caso" >
|	< _DEFAULT: "defeito" >
|	< ENDSWITCH: "fimescolhe" >

//operators:
|	< AND: "e" >
|	< OR: "ou" >
//|	< NAND: "ne" >
//|	< NOR: "nou" >
|	< XOR: "xou" >
|	< NOT: "nao" >

|	< OP_ASSIGN: "=" >  

|	< OP_GE: ">=" >
|	< OP_LE: "<=" >
|	< OP_G: ">" >
|	< OP_L: "<" >
|	< OP_E: "==" >
|	< OP_NEQ: "!=" >
    
|	< OP_PLUS: "+" >
|	< OP_MINUS: "-" >
|	< OP_MUL: "*" >
|	< OP_DIV: "/" >
|	< OP_MOD: "%" >

//separators
|	< LPARENT: "(" >
|	< RPARENT: ")" >

| 	< COMMA: "," >
| 	< DOT: "." >
    
| 	< LBRACKET: "[" >
| 	< RBRACKET: "]" >
 
|	< LKEYWAY: "{" >
|	< RKEYWAY: "}" >

| 	< EOL: "\n" >


//literals
|	< TRUE: "verdadeiro" >
|	< FALSE: "falso" >
|	< NULL: "nulo" >

|	< IDENTIFIER: (["_", "A"-"Z", "a"-"z"]) (["_", "A"-"Z", "a"-"z", "0"-"9"])* >

| 	< CHAR_LITERAL: "\'" (~["\'"]) "\'">
| 	< INT_LITERAL:  ( ["1"-"9"] (["0"-"9"])* | "0") >
| 	< REAL_LITERAL: (["0"-"9"])+ ( "." (["0"-"9"])+ )? | "." (["0"-"9"])+ >
| 	< STRING_LITERAL: "\"" (~["\""])* "\"" >

}

///



//sintax rules

void Start() : {/*@bgen(jjtree) Start */
  ASTStart jjtn000 = new ASTStart(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) Start */
        try {
/*@egen*/
	( ImportDeclaration() | <EOL> )*
	
	(  GlobalDeclarationList() | <EOL>	)*	
		
	<EOF>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

//the node ImportDeclaration have the follow attributes:
//string unit_name
void ImportDeclaration(): 
{/*@bgen(jjtree) ImportDeclaration */
        ASTImportDeclaration jjtn000 = new ASTImportDeclaration(JJTIMPORTDECLARATION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
	Token t;
}
{/*@bgen(jjtree) ImportDeclaration */
        try {
/*@egen*/
	<IMPORT> t = <IDENTIFIER> <EOL>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/ 
	{	jjtn000.setUnitName(t); }/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void GlobalDeclarationList()       : {}
{	
	LOOKAHEAD( { IsFunctionDeclaration() } )
	FunctionDeclaration()
	|
	VariableDeclarationList()
	|				
	StructDeclaration()	
}
//the node VariableDeclarationList have the follow attributes:
//int type_quali
//int type_spec
//string type_spec_custom

void VariableDeclarationList() : 
{/*@bgen(jjtree) VariableDeclarationList */
        ASTVariableDeclarationList jjtn000 = new ASTVariableDeclarationList(JJTVARIABLEDECLARATIONLIST);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
	Token t;
}
{/*@bgen(jjtree) VariableDeclarationList */
        try {
/*@egen*/	
	[ 
	t = TypeQualifier()	
	{ jjtn000.setTypeQualifier( t ); } 	
	] 
	
	t = TypeSpecifier() 	
	{ 
	  jjtn000.setTypeSpecifier(t);
	}
	VariableDeclaration() ( <COMMA> VariableDeclaration()  )*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/	
}

Token TypeQualifier()       : 
{
	Token t;
}
{
	( t = <CONSTANT>
	| t = <VARIABLE>
	| t = <REFERENCE> )
	{ return t; }
	
}

Token TypeSpecifier()       : 
{
	Token t;
}
{
	( t = <INT>
	| t = <REAL>
	| t = <STRING>
	| t = <CHAR>
	| t = <BOOL>
	| t = <IDENTIFIER> )
	{ return t; }
}

//the node VariableDeclaration have the follow attributes:
//string var_name
//boolean is_array
//array sizes and dimentions..

void VariableDeclaration() : 
{/*@bgen(jjtree) VariableDeclaration */
        ASTVariableDeclaration jjtn000 = new ASTVariableDeclaration(JJTVARIABLEDECLARATION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
	Token t;
}
{/*@bgen(jjtree) VariableDeclaration */
        try {
/*@egen*/
	t = VariableDeclarationId()	[ <OP_ASSIGN> VariableInitializer() ]/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/
	{ jjtn000.setVarName( t ); }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

Token VariableDeclarationId()       : 
{
	Token t;
}
{
	t = <IDENTIFIER> [ ArrayDims() ]
	{ return t; }
}

//-- array support..
void ArrayDims() : {/*@bgen(jjtree) ArrayDims */
  ASTArrayDims jjtn000 = new ASTArrayDims(JJTARRAYDIMS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) ArrayDims */
        try {
/*@egen*/
	( <LBRACKET> Expression() <RBRACKET> )+/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void VariableInitializer()       : {}
{
	ArrayInitializer()
	|
	Expression()
}

//allowed eof on array inicializator?
void ArrayInitializer(): {/*@bgen(jjtree) ArrayInitializer */
  ASTArrayInitializer jjtn000 = new ASTArrayInitializer(JJTARRAYINITIALIZER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) ArrayInitializer */
  try {
/*@egen*/		
  <LKEYWAY>  VariableInitializer() ( <COMMA> VariableInitializer() )*  <RKEYWAY>/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}


//---------------------------------------

//the node FunctionDeclaration have the follow attributes:
//int return_type
//string func_name
//string return_type_custom
void FunctionDeclaration() : 
{/*@bgen(jjtree) FunctionDeclaration */
        ASTFunctionDeclaration jjtn000 = new ASTFunctionDeclaration(JJTFUNCTIONDECLARATION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
	Token t;
}
{/*@bgen(jjtree) FunctionDeclaration */
        try {
/*@egen*/	
	[ 
	LOOKAHEAD(ReturnType() <IDENTIFIER> <LPARENT>) 	
	t = ReturnType()	
	{ 
	  jjtn000.setReturnType( t );
	}	
	] 
		
	t = <IDENTIFIER> FormalParametersList() <EOL>
	{ jjtn000.setFuncName( t ); }
	
	Statements()
	
	<END> [ <IDENTIFIER> ] (<EOL>|<EOF>)/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

Token ReturnType()       : 
{
	Token t;
}
{
	( t = <VOID> //{ jjtThis.return_type = VOID; } 
	| t = <INT>  //{ jjtThis.return_type = INT; }
	| t = <REAL>  //{ jjtThis.return_type = REAL; }
	| t = <STRING> //{ jjtThis.return_type = STRING; }
	| t = <CHAR> //{ jjtThis.return_type = CHAR; }
	| t = <BOOL> //{ jjtThis.return_type = BOOL; }
	| t = <IDENTIFIER> )//{  jjtThis.return_type = IDENTIFIER;  jjtThis.return_type_custom  = t.image; } )
	{ return t; }
}

//nr_parameters
void FormalParametersList() : {/*@bgen(jjtree) FormalParametersList */
  ASTFormalParametersList jjtn000 = new ASTFormalParametersList(JJTFORMALPARAMETERSLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) FormalParametersList */
        try {
/*@egen*/		
	<LPARENT> [ FormalParameter() ( <COMMA> FormalParameter() )* ] <RPARENT>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

//
//string var_name
//int type_spec
//string type_spec_custom

void FormalParameter() : 
{/*@bgen(jjtree) FormalParameter */
        ASTFormalParameter jjtn000 = new ASTFormalParameter(JJTFORMALPARAMETER);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/ 
	Token t;
} 
{/*@bgen(jjtree) FormalParameter */
        try {
/*@egen*/
	t = TypeSpecifier() { jjtn000.setParamType( t ); }	
	t = VariableDeclarationId()/*@bgen(jjtree)*/
                                        {
                                          jjtree.closeNodeScope(jjtn000, true);
                                          jjtc000 = false;
                                          jjtn000.jjtSetLastToken(getToken(0));
                                        }
/*@egen*/	{ jjtn000.setParamName( t ); }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/			
}

//---------------------------------------

//string struct_name;
// todo fields..


//nchilds = nr fields..
void StructDeclaration():
{/*@bgen(jjtree) StructDeclaration */
        ASTStructDeclaration jjtn000 = new ASTStructDeclaration(JJTSTRUCTDECLARATION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
	Token t;
}
{/*@bgen(jjtree) StructDeclaration */
        try {
/*@egen*/
	<STRUCT> t = <IDENTIFIER> <EOL>
	( VariableDeclarationList() <EOL> )+
	
	<END> [<IDENTIFIER>] (<EOL>|<EOF>)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/
	{	jjtn000.setStructName( t ); }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

//---------------------------------------

void Statements() : {/*@bgen(jjtree) Statements */
  ASTStatements jjtn000 = new ASTStatements(JJTSTATEMENTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) Statements */
        try {
/*@egen*/

	(
		LOOKAHEAD( { IsStatement() } ) //solve the ambiguity between <while> <do> / <do> <while>
		Statement()
	)*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void Statement()       : {}
{			
		LOOKAHEAD(2)
		CallFunction() //#Statement
		| 

		(
		LOOKAHEAD( <IDENTIFIER> ( <LBRACKET> Expression() <RBRACKET> | <DOT> <IDENTIFIER> )*  <OP_ASSIGN> Expression() )
			AssignmentStatement() //#Statement
		| 	
			VariableDeclarationList() //#Statement
		) 
		
		| WhileDoStatement() //#Statement
		| DoWhileStatement() //#Statement	 		
		| IfStatement() //#Statement
		| SwitchStatement()	//#Statement
		| ForStatement() //#Statement
		| ReturnStatement() //#Statement
		| <EOL>		
}

void ReturnStatement() : {/*@bgen(jjtree) ReturnStatement */
  ASTReturnStatement jjtn000 = new ASTReturnStatement(JJTRETURNSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) ReturnStatement */
        try {
/*@egen*/
	<RETURN> Expression()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void IfStatement() : {/*@bgen(jjtree) IfStatement */
  ASTIfStatement jjtn000 = new ASTIfStatement(JJTIFSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) IfStatement */
        try {
/*@egen*/
	<IF> Expression() <THEN> Statements()	
	//( LOOKAHEAD(2) <ELSE> <IF> Expression() <THEN> Statements() )*
	( LOOKAHEAD(1) <ELSE> Statements() )?
	<ENDIF>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
	
}

void SwitchStatement() : {/*@bgen(jjtree) SwitchStatement */
  ASTSwitchStatement jjtn000 = new ASTSwitchStatement(JJTSWITCHSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) SwitchStatement */
        try {
/*@egen*/
	<SWITCH> Expression() <EOL>
	(
		SwitchLabel()
		Statements()
	)*
	<ENDSWITCH>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void SwitchLabel() : {/*@bgen(jjtree) SwitchLabel */
  ASTSwitchLabel jjtn000 = new ASTSwitchLabel(JJTSWITCHLABEL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) SwitchLabel */
  try {
/*@egen*/
  <CASE> Expression() <EOL>
|
  <_DEFAULT> <EOL>/*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                     jjtn000.jjtSetLastToken(getToken(0));
                   }
/*@egen*/ { jjtn000.is_default = true; }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

void WhileDoStatement() : {/*@bgen(jjtree) WhileDoStatement */
  ASTWhileDoStatement jjtn000 = new ASTWhileDoStatement(JJTWHILEDOSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) WhileDoStatement */
        try {
/*@egen*/
	<WHILE> Expression() <DO> <EOL>
		Statements()
	<ENDWHILE>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void DoWhileStatement() : {/*@bgen(jjtree) DoWhileStatement */
  ASTDoWhileStatement jjtn000 = new ASTDoWhileStatement(JJTDOWHILESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) DoWhileStatement */
        try {
/*@egen*/
	<DO> <EOL>
		Statements()		
	<WHILE> Expression()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}
	
void ForStatement() : {/*@bgen(jjtree) ForStatement */
  ASTForStatement jjtn000 = new ASTForStatement(JJTFORSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) ForStatement */
        try {
/*@egen*/
	<FOR> VariableName() <OF> Expression() <TO> Expression() [ <STEP> Expression() ] <EOL>
		Statements()
	<NEXT>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void CallFunction() : 
{/*@bgen(jjtree) CallFunction */
        ASTCallFunction jjtn000 = new ASTCallFunction(JJTCALLFUNCTION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
	Token t;
}
{/*@bgen(jjtree) CallFunction */
        try {
/*@egen*/
	t = <IDENTIFIER> <LPARENT> [ Expression() ( <COMMA> Expression() )* ] <RPARENT>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/
	{ jjtn000.setFuncName( t ); }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

//---------------------------------------

//Expression syntax follows. 

void Expression()       :
{}
{
	ConditionalOrExpression()
}

void AssignmentStatement() :
{/*@bgen(jjtree) AssignmentStatement */
  ASTAssignmentStatement jjtn000 = new ASTAssignmentStatement(JJTASSIGNMENTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) AssignmentStatement */
  try {
/*@egen*/
  //PrimaryExpression() <OP_ASSIGN> Expression()
  //<IDENTIFIER> ( <LBRACKET> Expression() <RBRACKET> | <DOT> <IDENTIFIER> )* 
  VariableName()  <OP_ASSIGN> Expression()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

void ConditionalOrExpression()       :
{}
{
  ConditionalAndExpression() ( <OR>/*@bgen(jjtree) #OrNode( 2) */
                                    {
                                      ASTOrNode jjtn001 = new ASTOrNode(JJTORNODE);
                                      boolean jjtc001 = true;
                                      jjtree.openNodeScope(jjtn001);
                                      jjtn001.jjtSetFirstToken(getToken(1));
                                    }
                                    try {
/*@egen*/ ConditionalAndExpression()/*@bgen(jjtree)*/
                                    } catch (Throwable jjte001) {
                                      if (jjtc001) {
                                        jjtree.clearNodeScope(jjtn001);
                                        jjtc001 = false;
                                      } else {
                                        jjtree.popNode();
                                      }
                                      if (jjte001 instanceof RuntimeException) {
                                        throw (RuntimeException)jjte001;
                                      }
                                      if (jjte001 instanceof ParseException) {
                                        throw (ParseException)jjte001;
                                      }
                                      throw (Error)jjte001;
                                    } finally {
                                      if (jjtc001) {
                                        jjtree.closeNodeScope(jjtn001,  2);
                                        jjtn001.jjtSetLastToken(getToken(0));
                                      }
                                    }
/*@egen*/            )*
}

void ConditionalAndExpression()       :
{}
{
  ExclusiveOrExpression() ( <AND>/*@bgen(jjtree) #AndNode( 2) */
                                  {
                                    ASTAndNode jjtn001 = new ASTAndNode(JJTANDNODE);
                                    boolean jjtc001 = true;
                                    jjtree.openNodeScope(jjtn001);
                                    jjtn001.jjtSetFirstToken(getToken(1));
                                  }
                                  try {
/*@egen*/ ExclusiveOrExpression()/*@bgen(jjtree)*/
                                  } catch (Throwable jjte001) {
                                    if (jjtc001) {
                                      jjtree.clearNodeScope(jjtn001);
                                      jjtc001 = false;
                                    } else {
                                      jjtree.popNode();
                                    }
                                    if (jjte001 instanceof RuntimeException) {
                                      throw (RuntimeException)jjte001;
                                    }
                                    if (jjte001 instanceof ParseException) {
                                      throw (ParseException)jjte001;
                                    }
                                    throw (Error)jjte001;
                                  } finally {
                                    if (jjtc001) {
                                      jjtree.closeNodeScope(jjtn001,  2);
                                      jjtn001.jjtSetLastToken(getToken(0));
                                    }
                                  }
/*@egen*/             )*
}

void ExclusiveOrExpression()       :
{}
{
  EqualityExpression() ( <XOR>/*@bgen(jjtree) #XorNode( 2) */
                               {
                                 ASTXorNode jjtn001 = new ASTXorNode(JJTXORNODE);
                                 boolean jjtc001 = true;
                                 jjtree.openNodeScope(jjtn001);
                                 jjtn001.jjtSetFirstToken(getToken(1));
                               }
                               try {
/*@egen*/ EqualityExpression()/*@bgen(jjtree)*/
                               } catch (Throwable jjte001) {
                                 if (jjtc001) {
                                   jjtree.clearNodeScope(jjtn001);
                                   jjtc001 = false;
                                 } else {
                                   jjtree.popNode();
                                 }
                                 if (jjte001 instanceof RuntimeException) {
                                   throw (RuntimeException)jjte001;
                                 }
                                 if (jjte001 instanceof ParseException) {
                                   throw (ParseException)jjte001;
                                 }
                                 throw (Error)jjte001;
                               } finally {
                                 if (jjtc001) {
                                   jjtree.closeNodeScope(jjtn001,  2);
                                   jjtn001.jjtSetLastToken(getToken(0));
                                 }
                               }
/*@egen*/             )*
}

void EqualityExpression()       :
{}
{
  RelationalExpression() ( <OP_E>/*@bgen(jjtree) #EqNode( 2) */
                                  {
                                    ASTEqNode jjtn001 = new ASTEqNode(JJTEQNODE);
                                    boolean jjtc001 = true;
                                    jjtree.openNodeScope(jjtn001);
                                    jjtn001.jjtSetFirstToken(getToken(1));
                                  }
                                  try {
/*@egen*/ RelationalExpression()/*@bgen(jjtree)*/
                                  } catch (Throwable jjte001) {
                                    if (jjtc001) {
                                      jjtree.clearNodeScope(jjtn001);
                                      jjtc001 = false;
                                    } else {
                                      jjtree.popNode();
                                    }
                                    if (jjte001 instanceof RuntimeException) {
                                      throw (RuntimeException)jjte001;
                                    }
                                    if (jjte001 instanceof ParseException) {
                                      throw (ParseException)jjte001;
                                    }
                                    throw (Error)jjte001;
                                  } finally {
                                    if (jjtc001) {
                                      jjtree.closeNodeScope(jjtn001,  2);
                                      jjtn001.jjtSetLastToken(getToken(0));
                                    }
                                  }
/*@egen*/            | <OP_NEQ>/*@bgen(jjtree) #NEqNode( 2) */
                                                                                {
                                                                                  ASTNEqNode jjtn002 = new ASTNEqNode(JJTNEQNODE);
                                                                                  boolean jjtc002 = true;
                                                                                  jjtree.openNodeScope(jjtn002);
                                                                                  jjtn002.jjtSetFirstToken(getToken(1));
                                                                                }
                                                                                try {
/*@egen*/  RelationalExpression()/*@bgen(jjtree)*/
                                                                                } catch (Throwable jjte002) {
                                                                                  if (jjtc002) {
                                                                                    jjtree.clearNodeScope(jjtn002);
                                                                                    jjtc002 = false;
                                                                                  } else {
                                                                                    jjtree.popNode();
                                                                                  }
                                                                                  if (jjte002 instanceof RuntimeException) {
                                                                                    throw (RuntimeException)jjte002;
                                                                                  }
                                                                                  if (jjte002 instanceof ParseException) {
                                                                                    throw (ParseException)jjte002;
                                                                                  }
                                                                                  throw (Error)jjte002;
                                                                                } finally {
                                                                                  if (jjtc002) {
                                                                                    jjtree.closeNodeScope(jjtn002,  2);
                                                                                    jjtn002.jjtSetLastToken(getToken(0));
                                                                                  }
                                                                                }
/*@egen*/             )*
}

void RelationalExpression()       :
{}
{
  AdditiveExpression() 
  ( 
    <OP_G>/*@bgen(jjtree) #GNode( 2) */
           {
             ASTGNode jjtn001 = new ASTGNode(JJTGNODE);
             boolean jjtc001 = true;
             jjtree.openNodeScope(jjtn001);
             jjtn001.jjtSetFirstToken(getToken(1));
           }
           try {
/*@egen*/ AdditiveExpression()/*@bgen(jjtree)*/
           } catch (Throwable jjte001) {
             if (jjtc001) {
               jjtree.clearNodeScope(jjtn001);
               jjtc001 = false;
             } else {
               jjtree.popNode();
             }
             if (jjte001 instanceof RuntimeException) {
               throw (RuntimeException)jjte001;
             }
             if (jjte001 instanceof ParseException) {
               throw (ParseException)jjte001;
             }
             throw (Error)jjte001;
           } finally {
             if (jjtc001) {
               jjtree.closeNodeScope(jjtn001,  2);
               jjtn001.jjtSetLastToken(getToken(0));
             }
           }
/*@egen*/          
  | <OP_L>/*@bgen(jjtree) #LNode( 2) */
           {
             ASTLNode jjtn002 = new ASTLNode(JJTLNODE);
             boolean jjtc002 = true;
             jjtree.openNodeScope(jjtn002);
             jjtn002.jjtSetFirstToken(getToken(1));
           }
           try {
/*@egen*/ AdditiveExpression()/*@bgen(jjtree)*/
           } catch (Throwable jjte002) {
             if (jjtc002) {
               jjtree.clearNodeScope(jjtn002);
               jjtc002 = false;
             } else {
               jjtree.popNode();
             }
             if (jjte002 instanceof RuntimeException) {
               throw (RuntimeException)jjte002;
             }
             if (jjte002 instanceof ParseException) {
               throw (ParseException)jjte002;
             }
             throw (Error)jjte002;
           } finally {
             if (jjtc002) {
               jjtree.closeNodeScope(jjtn002,  2);
               jjtn002.jjtSetLastToken(getToken(0));
             }
           }
/*@egen*/          
  | <OP_GE>/*@bgen(jjtree) #GENode( 2) */
            {
              ASTGENode jjtn003 = new ASTGENode(JJTGENODE);
              boolean jjtc003 = true;
              jjtree.openNodeScope(jjtn003);
              jjtn003.jjtSetFirstToken(getToken(1));
            }
            try {
/*@egen*/ AdditiveExpression()/*@bgen(jjtree)*/
            } catch (Throwable jjte003) {
              if (jjtc003) {
                jjtree.clearNodeScope(jjtn003);
                jjtc003 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte003 instanceof RuntimeException) {
                throw (RuntimeException)jjte003;
              }
              if (jjte003 instanceof ParseException) {
                throw (ParseException)jjte003;
              }
              throw (Error)jjte003;
            } finally {
              if (jjtc003) {
                jjtree.closeNodeScope(jjtn003,  2);
                jjtn003.jjtSetLastToken(getToken(0));
              }
            }
/*@egen*/           
  | <OP_LE>/*@bgen(jjtree) #LENode( 2) */
            {
              ASTLENode jjtn004 = new ASTLENode(JJTLENODE);
              boolean jjtc004 = true;
              jjtree.openNodeScope(jjtn004);
              jjtn004.jjtSetFirstToken(getToken(1));
            }
            try {
/*@egen*/ AdditiveExpression()/*@bgen(jjtree)*/
            } catch (Throwable jjte004) {
              if (jjtc004) {
                jjtree.clearNodeScope(jjtn004);
                jjtc004 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte004 instanceof RuntimeException) {
                throw (RuntimeException)jjte004;
              }
              if (jjte004 instanceof ParseException) {
                throw (ParseException)jjte004;
              }
              throw (Error)jjte004;
            } finally {
              if (jjtc004) {
                jjtree.closeNodeScope(jjtn004,  2);
                jjtn004.jjtSetLastToken(getToken(0));
              }
            }
/*@egen*/           
  )*
}

void AdditiveExpression()       :
{}
{
  MultiplicativeExpression() 
  ( 
    <OP_PLUS>/*@bgen(jjtree) #AddNode( 2) */
              {
                ASTAddNode jjtn001 = new ASTAddNode(JJTADDNODE);
                boolean jjtc001 = true;
                jjtree.openNodeScope(jjtn001);
                jjtn001.jjtSetFirstToken(getToken(1));
              }
              try {
/*@egen*/ MultiplicativeExpression()/*@bgen(jjtree)*/
              } catch (Throwable jjte001) {
                if (jjtc001) {
                  jjtree.clearNodeScope(jjtn001);
                  jjtc001 = false;
                } else {
                  jjtree.popNode();
                }
                if (jjte001 instanceof RuntimeException) {
                  throw (RuntimeException)jjte001;
                }
                if (jjte001 instanceof ParseException) {
                  throw (ParseException)jjte001;
                }
                throw (Error)jjte001;
              } finally {
                if (jjtc001) {
                  jjtree.closeNodeScope(jjtn001,  2);
                  jjtn001.jjtSetLastToken(getToken(0));
                }
              }
/*@egen*/            
  | <OP_MINUS>/*@bgen(jjtree) #SubNode( 2) */
               {
                 ASTSubNode jjtn002 = new ASTSubNode(JJTSUBNODE);
                 boolean jjtc002 = true;
                 jjtree.openNodeScope(jjtn002);
                 jjtn002.jjtSetFirstToken(getToken(1));
               }
               try {
/*@egen*/ MultiplicativeExpression()/*@bgen(jjtree)*/
               } catch (Throwable jjte002) {
                 if (jjtc002) {
                   jjtree.clearNodeScope(jjtn002);
                   jjtc002 = false;
                 } else {
                   jjtree.popNode();
                 }
                 if (jjte002 instanceof RuntimeException) {
                   throw (RuntimeException)jjte002;
                 }
                 if (jjte002 instanceof ParseException) {
                   throw (ParseException)jjte002;
                 }
                 throw (Error)jjte002;
               } finally {
                 if (jjtc002) {
                   jjtree.closeNodeScope(jjtn002,  2);
                   jjtn002.jjtSetLastToken(getToken(0));
                 }
               }
/*@egen*/            
  )*
}

void MultiplicativeExpression()       :
{}
{
  UnaryExpression() 
  ( 
     <OP_MUL>/*@bgen(jjtree) #MulNode( 2) */
              {
                ASTMulNode jjtn001 = new ASTMulNode(JJTMULNODE);
                boolean jjtc001 = true;
                jjtree.openNodeScope(jjtn001);
                jjtn001.jjtSetFirstToken(getToken(1));
              }
              try {
/*@egen*/ UnaryExpression()/*@bgen(jjtree)*/
              } catch (Throwable jjte001) {
                if (jjtc001) {
                  jjtree.clearNodeScope(jjtn001);
                  jjtc001 = false;
                } else {
                  jjtree.popNode();
                }
                if (jjte001 instanceof RuntimeException) {
                  throw (RuntimeException)jjte001;
                }
                if (jjte001 instanceof ParseException) {
                  throw (ParseException)jjte001;
                }
                throw (Error)jjte001;
              } finally {
                if (jjtc001) {
                  jjtree.closeNodeScope(jjtn001,  2);
                  jjtn001.jjtSetLastToken(getToken(0));
                }
              }
/*@egen*/            
   | <OP_DIV>/*@bgen(jjtree) #DivNode( 2) */
              {
                ASTDivNode jjtn002 = new ASTDivNode(JJTDIVNODE);
                boolean jjtc002 = true;
                jjtree.openNodeScope(jjtn002);
                jjtn002.jjtSetFirstToken(getToken(1));
              }
              try {
/*@egen*/ UnaryExpression()/*@bgen(jjtree)*/
              } catch (Throwable jjte002) {
                if (jjtc002) {
                  jjtree.clearNodeScope(jjtn002);
                  jjtc002 = false;
                } else {
                  jjtree.popNode();
                }
                if (jjte002 instanceof RuntimeException) {
                  throw (RuntimeException)jjte002;
                }
                if (jjte002 instanceof ParseException) {
                  throw (ParseException)jjte002;
                }
                throw (Error)jjte002;
              } finally {
                if (jjtc002) {
                  jjtree.closeNodeScope(jjtn002,  2);
                  jjtn002.jjtSetLastToken(getToken(0));
                }
              }
/*@egen*/            
   | <OP_MOD>/*@bgen(jjtree) #ModNode( 2) */
              {
                ASTModNode jjtn003 = new ASTModNode(JJTMODNODE);
                boolean jjtc003 = true;
                jjtree.openNodeScope(jjtn003);
                jjtn003.jjtSetFirstToken(getToken(1));
              }
              try {
/*@egen*/ UnaryExpression()/*@bgen(jjtree)*/
              } catch (Throwable jjte003) {
                if (jjtc003) {
                  jjtree.clearNodeScope(jjtn003);
                  jjtc003 = false;
                } else {
                  jjtree.popNode();
                }
                if (jjte003 instanceof RuntimeException) {
                  throw (RuntimeException)jjte003;
                }
                if (jjte003 instanceof ParseException) {
                  throw (ParseException)jjte003;
                }
                throw (Error)jjte003;
              } finally {
                if (jjtc003) {
                  jjtree.closeNodeScope(jjtn003,  2);
                  jjtn003.jjtSetLastToken(getToken(0));
                }
              }
/*@egen*/            
   )*
}

void UnaryExpression()       :
{}
{
    <OP_PLUS> UnaryExpression()
  | <OP_MINUS>/*@bgen(jjtree) NegNode */
               {
                 ASTNegNode jjtn001 = new ASTNegNode(JJTNEGNODE);
                 boolean jjtc001 = true;
                 jjtree.openNodeScope(jjtn001);
                 jjtn001.jjtSetFirstToken(getToken(1));
               }
               try {
/*@egen*/ UnaryExpression()/*@bgen(jjtree)*/
               } catch (Throwable jjte001) {
                 if (jjtc001) {
                   jjtree.clearNodeScope(jjtn001);
                   jjtc001 = false;
                 } else {
                   jjtree.popNode();
                 }
                 if (jjte001 instanceof RuntimeException) {
                   throw (RuntimeException)jjte001;
                 }
                 if (jjte001 instanceof ParseException) {
                   throw (ParseException)jjte001;
                 }
                 throw (Error)jjte001;
               } finally {
                 if (jjtc001) {
                   jjtree.closeNodeScope(jjtn001, true);
                   jjtn001.jjtSetLastToken(getToken(0));
                 }
               }
/*@egen*/             
  | <NOT>/*@bgen(jjtree) NotNode */
          {
            ASTNotNode jjtn002 = new ASTNotNode(JJTNOTNODE);
            boolean jjtc002 = true;
            jjtree.openNodeScope(jjtn002);
            jjtn002.jjtSetFirstToken(getToken(1));
          }
          try {
/*@egen*/ UnaryExpression()/*@bgen(jjtree)*/
          } catch (Throwable jjte002) {
            if (jjtc002) {
              jjtree.clearNodeScope(jjtn002);
              jjtc002 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte002 instanceof RuntimeException) {
              throw (RuntimeException)jjte002;
            }
            if (jjte002 instanceof ParseException) {
              throw (ParseException)jjte002;
            }
            throw (Error)jjte002;
          } finally {
            if (jjtc002) {
              jjtree.closeNodeScope(jjtn002, true);
              jjtn002.jjtSetLastToken(getToken(0));
            }
          }
/*@egen*/          
  | PrimaryExpression()
}

void PrimaryExpression()       :
{}
{
  LOOKAHEAD(2)
  CallFunction()
  |
  VariableName()
  |
  <LPARENT> Expression() <RPARENT>
  |
  Literal()
}

void VariableName(): 
{/*@bgen(jjtree) VariableName */
        ASTVariableName jjtn000 = new ASTVariableName(JJTVARIABLENAME);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
	Token t;
}
{/*@bgen(jjtree) VariableName */
        try {
/*@egen*/	
	//[ ] array index
    //.   member access
	
	t = <IDENTIFIER> { jjtn000.setVarName( t ); }
	
	( VariableNameSuffix() )*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

//-----
//array and struct operators support
void VariableNameSuffix()      :
{}
{	
	IndexSelector() | FieldSelector()	
}

void IndexSelector() : {/*@bgen(jjtree) IndexSelector */
  ASTIndexSelector jjtn000 = new ASTIndexSelector(JJTINDEXSELECTOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) IndexSelector */
        try {
/*@egen*/
	<LBRACKET> Expression() <RBRACKET>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void FieldSelector() : {/*@bgen(jjtree) FieldSelector */
  ASTFieldSelector jjtn000 = new ASTFieldSelector(JJTFIELDSELECTOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) FieldSelector */
        try {
/*@egen*/
	<DOT> <IDENTIFIER>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}
//----

void Literal()       :
{
	Token t;
}
{
	   t = <CHAR_LITERAL>/*@bgen(jjtree) CharNode */
                              {
                                ASTCharNode jjtn001 = new ASTCharNode(JJTCHARNODE);
                                boolean jjtc001 = true;
                                jjtree.openNodeScope(jjtn001);
                                jjtn001.jjtSetFirstToken(getToken(1));
                              }
                              try {
/*@egen*//*@bgen(jjtree)*/
                              {
                                jjtree.closeNodeScope(jjtn001, true);
                                jjtc001 = false;
                                jjtn001.jjtSetLastToken(getToken(0));
                              }
/*@egen*/ { jjtn001.value = t.image; }/*@bgen(jjtree)*/
                              } finally {
                                if (jjtc001) {
                                  jjtree.closeNodeScope(jjtn001, true);
                                  jjtn001.jjtSetLastToken(getToken(0));
                                }
                              }
/*@egen*/          
	 | t = <INT_LITERAL>/*@bgen(jjtree) IntNode */
                              {
                                ASTIntNode jjtn002 = new ASTIntNode(JJTINTNODE);
                                boolean jjtc002 = true;
                                jjtree.openNodeScope(jjtn002);
                                jjtn002.jjtSetFirstToken(getToken(1));
                              }
                              try {
/*@egen*//*@bgen(jjtree)*/
                              {
                                jjtree.closeNodeScope(jjtn002, true);
                                jjtc002 = false;
                                jjtn002.jjtSetLastToken(getToken(0));
                              }
/*@egen*/  { jjtn002.value = Integer.parseInt(t.image); }/*@bgen(jjtree)*/
                              } finally {
                                if (jjtc002) {
                                  jjtree.closeNodeScope(jjtn002, true);
                                  jjtn002.jjtSetLastToken(getToken(0));
                                }
                              }
/*@egen*/         
	 | t = <REAL_LITERAL>/*@bgen(jjtree) RealNode */
                              {
                                ASTRealNode jjtn003 = new ASTRealNode(JJTREALNODE);
                                boolean jjtc003 = true;
                                jjtree.openNodeScope(jjtn003);
                                jjtn003.jjtSetFirstToken(getToken(1));
                              }
                              try {
/*@egen*//*@bgen(jjtree)*/
                              {
                                jjtree.closeNodeScope(jjtn003, true);
                                jjtc003 = false;
                                jjtn003.jjtSetLastToken(getToken(0));
                              }
/*@egen*/ { jjtn003.value = Double.parseDouble(t.image); }/*@bgen(jjtree)*/
                              } finally {
                                if (jjtc003) {
                                  jjtree.closeNodeScope(jjtn003, true);
                                  jjtn003.jjtSetLastToken(getToken(0));
                                }
                              }
/*@egen*/          
	 | t = <STRING_LITERAL>/*@bgen(jjtree) StringNode */
                                {
                                  ASTStringNode jjtn004 = new ASTStringNode(JJTSTRINGNODE);
                                  boolean jjtc004 = true;
                                  jjtree.openNodeScope(jjtn004);
                                  jjtn004.jjtSetFirstToken(getToken(1));
                                }
                                try {
/*@egen*//*@bgen(jjtree)*/
                                {
                                  jjtree.closeNodeScope(jjtn004, true);
                                  jjtc004 = false;
                                  jjtn004.jjtSetLastToken(getToken(0));
                                }
/*@egen*/	{ jjtn004.value = t.image; }/*@bgen(jjtree)*/
                                } finally {
                                  if (jjtc004) {
                                    jjtree.closeNodeScope(jjtn004, true);
                                    jjtn004.jjtSetLastToken(getToken(0));
                                  }
                                }
/*@egen*/            
	 |/*@bgen(jjtree) TrueNode */
           {
             ASTTrueNode jjtn005 = new ASTTrueNode(JJTTRUENODE);
             boolean jjtc005 = true;
             jjtree.openNodeScope(jjtn005);
             jjtn005.jjtSetFirstToken(getToken(1));
           }
           try {
/*@egen*/ <TRUE>/*@bgen(jjtree)*/
           } finally {
             if (jjtc005) {
               jjtree.closeNodeScope(jjtn005, true);
               jjtn005.jjtSetLastToken(getToken(0));
             }
           }
/*@egen*/          
	 |/*@bgen(jjtree) FalseNode */
           {
             ASTFalseNode jjtn006 = new ASTFalseNode(JJTFALSENODE);
             boolean jjtc006 = true;
             jjtree.openNodeScope(jjtn006);
             jjtn006.jjtSetFirstToken(getToken(1));
           }
           try {
/*@egen*/ <FALSE>/*@bgen(jjtree)*/
           } finally {
             if (jjtc006) {
               jjtree.closeNodeScope(jjtn006, true);
               jjtn006.jjtSetLastToken(getToken(0));
             }
           }
/*@egen*/           
	 |/*@bgen(jjtree) NullNode */
           {
             ASTNullNode jjtn007 = new ASTNullNode(JJTNULLNODE);
             boolean jjtc007 = true;
             jjtree.openNodeScope(jjtn007);
             jjtn007.jjtSetFirstToken(getToken(1));
           }
           try {
/*@egen*/ <NULL>/*@bgen(jjtree)*/
           } finally {
             if (jjtc007) {
               jjtree.closeNodeScope(jjtn007, true);
               jjtn007.jjtSetLastToken(getToken(0));
             }
           }
/*@egen*/          
}



